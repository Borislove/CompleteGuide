package chapter_14;

//Простой обобщенный класс.
//Здесь T обозначает параметр типа, который будет заменен реальным типом при создании объекта типа Gen
public class Gen <T>{
    T ob; //объявить объхект типа T

    //Передать конструктору ссылку на объект типа T
    Gen (T o){
        ob = o;
    }

    //Возвратить объект ob
    T getOb(){
        return ob;
    }

    //Показать тип T
    void showType(){
        System.out.println("Типом T является "+ob.getClass().getName());
    }
}

    //Продемонстрировать применение обобщенного класса
class GenDemo{
        public static void main(String[] args) {
            //Создать ссылку типа Gen для целых чисел
            Gen<Integer> iOB;
            //Создать объект типа Gen<Integer> и присвоить ссылку на него переменной iOB.
            //Обратите внимание на применение автоупаковки для инкапсуляции значения 88 в объекте типа Integer
            iOB = new Gen<Integer>(88);

            //показать тип данных, хранящихся в переменной iOB
            iOB.showType();

            //Получить значение переменной iOB.
            //Обратите внимание на то, что для этого не требуется никакого приведения типов
            int v = iOB.getOb();
            System.out.println("Значение: "+v);
            System.out.println();

            //создать объект типа Gen для символьных строк
            Gen<String> strOb = new Gen<String > ("Тест обобщений");

            //показать тип данных, хранящихся в переменной strOb
            strOb.showType();

            //получить значение переменной strOb. И в этом случаее приведение типов не требуется
            String str = strOb.getOb();
            System.out.println("Значение: "+str);
        }
    }

